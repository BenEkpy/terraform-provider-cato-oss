package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

var (
	_ datasource.DataSource              = &entityLookupDataSource{}
	_ datasource.DataSourceWithConfigure = &entityLookupDataSource{}
)

func NewEntityLookupDataSource() datasource.DataSource {
	return &entityLookupDataSource{}
}

type entityLookupDataSource struct {
	client *Client
}

type entityLookupDataSourceModel struct {
	AccountID  types.String            `tfsdk:"account_id"`
	EntityType types.String            `tfsdk:"entity_type"`
	Items      []itemELDataSourceModel `tfsdk:"items"`
}

type itemELDataSourceModel struct {
	Entity       entityELDataSourceModel `tfsdk:"entity"`
	Description  types.String            `tfsdk:"description"`
	HelperFields types.Map               `tfsdk:"helperfields"`
}

type entityELDataSourceModel struct {
	Id   types.String `tfsdk:"id"`
	Name types.String `tfsdk:"name"`
	Type types.String `tfsdk:"type"`
}

func (d *entityLookupDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_entityLookup"
}

func (d *entityLookupDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"account_id": schema.StringAttribute{
				Description: "Cato Account ID (can be found into the URL on the CMA)",
				Required: true,
			},
			"entity_type": schema.StringAttribute{
				Description: "Entity type (site, ...)",
				Required: true,
			},
			"items": schema.ListNestedAttribute{
				Description: "List of entities",
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"entity": schema.SingleNestedAttribute{
							Description: "Entity principal attributes",
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Description: "Entity identifier",
									Computed: true,
								},
								"name": schema.StringAttribute{
									Description: "Entity name",
									Computed: true,
								},
								"type": schema.StringAttribute{
									Description: "Entity type",
									Computed: true,
								},
							},
						},
						"description": schema.StringAttribute{
							Description: "Entity description",
							Computed: true,
						},
						"helperfields": schema.MapAttribute{
							Description: "List of entity secondary attributes",
							ElementType: types.StringType,
							Computed:    true,
						},
					},
				},
			},
		},
	}
}

func (d *entityLookupDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*Client)
}

func (d *entityLookupDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var state entityLookupDataSourceModel

	diags := req.Config.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	query := graphQLRequest{
		Query: `query entityLookup ($accountID: ID!, $type: EntityType!) {
			entityLookup (accountID: $accountID, type: $type) {
				items {
					entity {
						id
						name
						type
					}
					description
					helperFields
				}
			}
		}`,
		Variables: map[string]interface{}{
			"accountID": string(state.AccountID.ValueString()),
			"type":      string(state.EntityType.ValueString()),
		},
	}

	// Cato Client logic, to be externalized
	body, err := d.client.do(query)
	if err != nil {
		resp.Diagnostics.AddError(
			"Cato API error",
			err.Error(),
		)
		return
	}

	// Cato Client logic, to be externalized
	var response queryELResponseModel
	err = json.Unmarshal(body, &response)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to process Cato API Response",
			err.Error(),
		)
		return
	}

	// Cato Client logic, to be externalized
	for _, item := range response.Data.EntityLookup.Items {

		helperElements := make(map[string]attr.Value)
		for k, v := range item.HelperFields {
			helperElements[k] = types.StringValue(v)
		}

		helperFields, _ := types.MapValue(types.StringType, helperElements)

		itemState := itemELDataSourceModel{
			Entity: entityELDataSourceModel{
				Id:   types.StringValue(item.Entity.Id),
				Name: types.StringValue(item.Entity.Name),
				Type: types.StringValue(item.Entity.Type),
			},
			Description:  types.StringValue(item.Description),
			HelperFields: helperFields,
		}

		state.Items = append(state.Items, itemState)

	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
